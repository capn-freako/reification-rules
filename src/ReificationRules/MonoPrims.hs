{-# LANGUAGE FlexibleContexts, TypeOperators #-}
{-# OPTIONS_GHC -Wall #-}

-- {-# OPTIONS_GHC -fno-warn-unused-imports #-} -- TEMP
-- {-# OPTIONS_GHC -fno-warn-unused-binds   #-} -- TEMP

{-# OPTIONS_GHC -fno-warn-missing-signatures #-}

----------------------------------------------------------------------
-- |
-- Module      :  ReificationRules.MonoPrims
-- Copyright   :  (c) 2016 Conal Elliott
-- License     :  BSD3
--
-- Maintainer  :  conal@conal.net
-- Stability   :  experimental
-- 
-- Monomorphic Prim specializations
----------------------------------------------------------------------

module ReificationRules.MonoPrims where

import ReificationRules.Prim (Prim(..),CircuitIf)
import ReificationRules.Misc (Unop,Binop,BinRel,(:*))

-- Synonyms, just because I don't know how to look up constructors successfully.
-- 
-- TODO: Revisit, now that I do know how.

notP  = NotP
andP  = AndP
orP   = OrP

pairP = PairP
exlP  = ExlP
exrP  = ExrP

ifP :: CircuitIf a => Prim (Bool :* (a :* a) -> a)
ifP = IfP

type PowIop a = a -> Int -> a

-- Prim specializations generated by "putStr monoPrimDefs" from Plugin:


bEq     =     EqP :: Prim (BinRel Bool  )
bNe     =     NeP :: Prim (BinRel Bool  )
iEq     =     EqP :: Prim (BinRel Int   )
iNe     =     NeP :: Prim (BinRel Int   )
dEq     =     EqP :: Prim (BinRel Double)
dNe     =     NeP :: Prim (BinRel Double)
bLt     =     LtP :: Prim (BinRel Bool  )
bGt     =     GtP :: Prim (BinRel Bool  )
bLe     =     LeP :: Prim (BinRel Bool  )
bGe     =     GeP :: Prim (BinRel Bool  )
iLt     =     LtP :: Prim (BinRel Int   )
iGt     =     GtP :: Prim (BinRel Int   )
iLe     =     LeP :: Prim (BinRel Int   )
iGe     =     GeP :: Prim (BinRel Int   )
dLt     =     LtP :: Prim (BinRel Double)
dGt     =     GtP :: Prim (BinRel Double)
dLe     =     LeP :: Prim (BinRel Double)
dGe     =     GeP :: Prim (BinRel Double)
iNegate = NegateP :: Prim (Unop   Int   )
dNegate = NegateP :: Prim (Unop   Double)
iAdd    =    AddP :: Prim (Binop  Int   )
iSub    =    SubP :: Prim (Binop  Int   )
iMul    =    MulP :: Prim (Binop  Int   )
dAdd    =    AddP :: Prim (Binop  Double)
dSub    =    SubP :: Prim (Binop  Double)
dMul    =    MulP :: Prim (Binop  Double)
iPowI   =   PowIP :: Prim (PowIop Int   )
dPowI   =   PowIP :: Prim (PowIop Double)
dExp    =    ExpP :: Prim (Unop   Double)
dCos    =    CosP :: Prim (Unop   Double)
dSin    =    SinP :: Prim (Unop   Double)
dRecip  =  RecipP :: Prim (Unop   Double)
dDivide = DivideP :: Prim (Binop  Double)
