-- {-# LANGUAGE #-}
{-# OPTIONS_GHC -Wall #-}

-- {-# OPTIONS_GHC -fno-warn-unused-imports #-} -- TEMP
-- {-# OPTIONS_GHC -fno-warn-unused-binds   #-} -- TEMP

{-# OPTIONS_GHC -fno-warn-missing-signatures #-}

----------------------------------------------------------------------
-- |
-- Module      :  ReificationRules.MonoPrims
-- Copyright   :  (c) 2016 Conal Elliott
-- License     :  BSD3
--
-- Maintainer  :  conal@conal.net
-- Stability   :  experimental
-- 
-- Monomorphic Prim specializations
----------------------------------------------------------------------

module ReificationRules.MonoPrims where

import Circat.Doubli (Doubli)

import ReificationRules.Prim (Prim(..))
import ReificationRules.Misc (Unop,Binop,BinRel)

-- Synonyms, just because I don't know how to look up constructors successfully.

notP  = NotP
andP  = AndP
orP   = OrP

pairP = PairP
exlP  = ExlP
exrP  = ExrP

-- Prim specializations generated by "putStr monoPrimDefs" from Plugin:

bEq     =     EqP :: Prim (BinRel Bool  )
bNe     =     NeP :: Prim (BinRel Bool  )
iEq     =     EqP :: Prim (BinRel Int   )
iNe     =     NeP :: Prim (BinRel Int   )
dEq     =     EqP :: Prim (BinRel Doubli)
dNe     =     NeP :: Prim (BinRel Doubli)
bLt     =     LtP :: Prim (BinRel Bool  )
bGt     =     GtP :: Prim (BinRel Bool  )
bLe     =     LeP :: Prim (BinRel Bool  )
bGe     =     GeP :: Prim (BinRel Bool  )
iLt     =     LtP :: Prim (BinRel Int   )
iGt     =     GtP :: Prim (BinRel Int   )
iLe     =     LeP :: Prim (BinRel Int   )
iGe     =     GeP :: Prim (BinRel Int   )
dLt     =     LtP :: Prim (BinRel Doubli)
dGt     =     GtP :: Prim (BinRel Doubli)
dLe     =     LeP :: Prim (BinRel Doubli)
dGe     =     GeP :: Prim (BinRel Doubli)
iNegate = NegateP :: Prim (Unop   Int   )
dNegate = NegateP :: Prim (Unop   Doubli)
iAdd    =    AddP :: Prim (Binop  Int   )
iSub    =    SubP :: Prim (Binop  Int   )
iMul    =    MulP :: Prim (Binop  Int   )
dAdd    =    AddP :: Prim (Binop  Doubli)
dSub    =    SubP :: Prim (Binop  Doubli)
dMul    =    MulP :: Prim (Binop  Doubli)
dExp    =    ExpP :: Prim (Unop   Doubli)
dCos    =    CosP :: Prim (Unop   Doubli)
dSin    =    SinP :: Prim (Unop   Doubli)
dRecip  =  RecipP :: Prim (Unop   Doubli)
dDivide = DivideP :: Prim (Binop  Doubli)
